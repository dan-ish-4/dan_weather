{"version":3,"sources":["components/wheather/Atrical_card.js","components/wheather/Temp.js","App.js","reportWebVitals.js","index.js"],"names":["Atrical_card","_ref","tempInfo","temp","pressure","humidity","condition","name","speed","country","sunset","_useState","document","getElementsByClassName","useState","_useState2","Object","slicedToArray","weatherState","setweatherState","useEffect","date","Date","timeset","concat","getHours","getMinutes","react_default","a","createElement","Fragment","className","toLocaleString","Temp","weathervalue","setweathervalue","_useState3","_useState4","settempInfo","getweatherinfo","asyncToGenerator","_regeneratorRuntime","mark","_callee","url","res","data","_data$main","_data$sys","wrap","_context","prev","next","fetch","sent","json","main","weather","wind","sys","t0","console","log","stop","apply","this","arguments","type","placeholder","autoFocus","id","value","onChange","e","target","onClick","wheather_Atrical_card","App","wheather_Temp","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.3d6c98b2.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n// import moment from \"moment\";\r\n// import { faThunderstorm } from \"@fortawesome/free-solid-svg-icons\";\r\nconst Atrical_card = ({ tempInfo }) => {\r\n  const { temp, pressure, humidity, condition, name, speed, country, sunset } =\r\n    tempInfo;\r\n    const weatherCondition =document.getElementsByClassName(\"weatherConditon\");\r\n  const [weatherState, setweatherState] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (condition) {\r\n      switch (condition) {\r\n        case \"Clouds\":\r\n          setweatherState(\"wi-day-cloudy\");\r\n          break;\r\n        case \"Haze\":\r\n          setweatherState(\"wi-fog\");\r\n          break;\r\n        case \"Clear\":\r\n          setweatherState(\"wi-day-sunny\");\r\n          break;\r\n        case \"Rain\":\r\n          setweatherState(\"wi-rain\");\r\n          break;\r\n          case \"Thunderstorm\":\r\n              setweatherState(\"wi-thunderstorm\");\r\n              break;\r\n\r\n\r\n        default:\r\n          setweatherState(\"wi-day-sunny\");\r\n          break;\r\n      }\r\n    }\r\n  }, [condition]);\r\n  \r\n  //convert time to sec\r\n  let sec = sunset\r\n  let date = new Date(sec*1000)\r\n//   let timeset=date.toLocaleString('en-US', { hour: 'numeric', hour12: true })\r\n let timeset = `${date.getHours()}:${date.getMinutes()}`\r\n//   let ampm = date.getHours>= 12 ? 'pm':'am';\r\n//    let ampm =moment(new Date()).format(\"hh:mm A\");\r\n  return (\r\n    <>\r\n      <article className=\"widget\">\r\n        <div className=\"weatherIcon\">\r\n          <i className={`wi ${weatherState}`}></i>\r\n        </div>\r\n        <div className=\"weatherInfo\">\r\n          <div className=\"temperature\">\r\n            <span>{temp}&#176;</span>\r\n          </div>\r\n          <div className=\"description\">\r\n            <div className=\"weatherCondition\">{condition}</div>\r\n            <div className=\"place\">\r\n              {\" \"}\r\n              {name},{country}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"date\">{new Date().toLocaleString()}</div>\r\n        {/* our four divided sections */}\r\n        <div className=\"extra-temp\">\r\n          <div className=\"two-sided-section\">\r\n            <p>\r\n              <i className={\"wi wi-sunset\"}></i>\r\n            </p>\r\n            <p className=\"extra-info-leftside\">\r\n            {timeset}<br />\r\n             sunset\r\n            </p>\r\n          </div>\r\n\r\n          <div className=\"two-sided-section\">\r\n            <p>\r\n              <i className={\"wi wi-humidity\"}></i>\r\n            </p>\r\n            <p className=\"extra-info-leftside\">\r\n              {humidity} <br />\r\n              humidity\r\n            </p>\r\n          </div>\r\n\r\n          <div className=\"two-sided-section\">\r\n            <p>\r\n              <i className={\"wi wi-barometer\"}></i>\r\n            </p>\r\n            <p className=\"extra-info-leftside\">\r\n              {pressure} <br />\r\n              pressure\r\n            </p>\r\n          </div>\r\n\r\n          <div className=\"two-sided-section\">\r\n            <p>\r\n              <i className={\"wi wi-strong-wind\"}></i>\r\n            </p>\r\n            <p className=\"extra-info-leftside\">\r\n             {speed} <br />\r\n              speed\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </article>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Atrical_card;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./style.css\";\r\nimport Atrical_card from \"./Atrical_card\";\r\nconst Temp = () => {\r\n    const [weathervalue,setweathervalue] = useState(\"Jaipur\");\r\n    const [tempInfo,settempInfo] =useState({});\r\n    const getweatherinfo=async()=>{\r\n        try{\r\n            let url =`https://api.openweathermap.org/data/2.5/weather?q=${weathervalue}&appid=055a4325b961788447616088980727fe&units=metric`\r\n            let res =  await fetch(url);\r\n            let data = await res.json();\r\n            \r\n                //..destructruing...\r\n                const {temp,pressure,humidity}=data.main\r\n                const {main: condition } = data.weather[0]\r\n                const {name} =data\r\n                const{speed}=data.wind\r\n                const{country,sunset}=data.sys\r\n                const mynewweatherInfo={\r\n                    temp,\r\n                    pressure,\r\n                    humidity,\r\n                    condition,\r\n\r\n                    name,\r\n                    speed,\r\n                    country,\r\n                    sunset,\r\n                }\r\n                settempInfo(mynewweatherInfo);\r\n\r\n        }catch(error){\r\n            console.log(\"u got some error\");\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n    useEffect(()=>{\r\n        getweatherinfo();\r\n\r\n    },[])\r\n\r\n  return (\r\n    <>\r\n      <div className=\"wrap\" >\r\n        <div className=\"search\">\r\n          <input\r\n            type=\"search\"\r\n            placeholder=\"search here.....\"\r\n            autoFocus\r\n            id=\"search\"\r\n            className=\"searchTerm\"\r\n            value={weathervalue}\r\n            onChange={(e)=>setweathervalue(e.target.value)}\r\n          />\r\n          <button className=\"searchbutton\" type=\"button\" onClick={getweatherinfo}>\r\n            search\r\n          </button>\r\n        </div>\r\n      </div>\r\n      {/* our temp card */}\r\n     <Atrical_card tempInfo ={tempInfo}/>\r\n    </>\r\n  );\r\n};\r\nexport default Temp;\r\n","import React from \"react\";\n// import Todo from \"./components/TodoAPP/Todo\";\n// import UseState from \"./components/Usestate\";\n// import Useeffect from \"./components/Useeffect\";\n// import {Usereducer} from \"./components/Usereducer\";\nimport Temp from \"./components/wheather/Temp\";\nfunction App() {\n  return (\n    <>\n    {/* <Todo/> */}\n    <Temp/>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}